<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <description>Spring公共配置</description>

    <context:property-placeholder location="classpath*:application.properties"/>

    <!-- 自动扫描注解，除controller以外 -->
    <context:component-scan base-package="com.wind">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- tomcat jdbc 连接池配置 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <property name="driverClassName" value="${dataSource.driverClassName}" />
        <property name="url" value="${dataSource.url}" />
        <property name="username" value="${dataSource.username}" />
        <property name="password" value="${dataSource.password}" />
        <!-- (int) 最大空闲连接： 连接池中容许保持空闲状态的最大连接数量，
         超过的空闲连接将被释放， 如果设置为负数表示不限制如果启用，将定期检查限制连接，
         如果空闲时间超过minEvictableIdleTimeMillis 则释放连接 （ 参考testWhileIdle ）  -->
        <property name="maxIdle" value="${dataSource.maxIdle}" />
        <!-- (int) 最小空闲连接： 连接池中容许保持空闲状态的最小连接数量， 低于这个数量将创建新的连接， 
        如果设置为0 则不创建,如果连接验证失败将缩小这个值,默认与initialSize 相同 -->
        <property name="minIdle" value="${dataSource.minIdle}" />
        <!-- (int) 最大活动连接： 连接池在同一时间能够分配的最大活动连接的数量， 
        如果设置为非正数则表示不限制 -->
        <property name="maxActive" value="${dataSource.maxActive}" />
        <!-- (int) 最大等待时间： 当没有可用连接时， 连接池等待连接被归还的最大时间( 以毫秒计数)， 
        超过时间则抛出异常， 如果设置为-1 表示无限等待，默认30000（30秒） -->
        <property name="maxWait" value="${dataSource.maxWait}" />
        <!-- (int) 初始化连接： 连接池启动时创建的初始化连接数量 -->
        <property name="initialSize" value="${dataSource.initialSize}" />
        <!-- (boolean) 标记是否删除泄露的连接， 如果他们超过了removeAbandonedTimout 的限制。 
        如果设置为true， 连接被认为是被泄露并且可以被删除， 如果空闲时间超过removeAbandonedTimeout。 
        设置为true 可以为写法糟糕的没有关闭连接的程序修复数据库连接。 参考logAbandoned -->
        <property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
        <!-- (int) 泄露的连接可以被删除的超时值， 单位秒应设置为应用中查询执行最长的时间 -->
        <property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
        <!-- 从连接池借用连接时是否验证连接有效性 -->
        <property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
        <!-- 验证连接是否有效，(String) SQL 查询， 用来验证从连接池取出的连接， 在将连接返回给调用者
        之前。如果指定， 则查询必须是一个SQL SELECT 并且必须返回至少一行记录 查询不必返回记录，
        但这样将不能抛出SQL异常 -->
        <property name="validationQuery" value="${dataSource.validationQuery}" />
        <!-- (long) 避免过度验证，保证验证不超过这个频率——以毫秒为单位。如果一个连接应该被验证，
        但上次验证未达到指定间隔，将不再次验证。  30000（30秒）
        <property name="validationInterval" value="30000" /> -->
        <!-- (boolean) 连接池创建的连接的默认的auto-commit 状态,driver default
        <property name="defaultAutoCommit" value="true" /> -->
        <!-- 验证失败时，是否将连接从池中丢弃
        <property name="testWhileIdle" value="true" /> -->
        <!-- 把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开,
        直到连接池中的连接数到minIdle为止(毫秒，30分钟)
        <property name="timeBetweenEvictionRunsMillis" value="1200000" /> -->
        <!-- 连接池中连接可空闲的时间（毫秒，5分钟）
        <property name="minEvictableIdleTimeMillis" value="1800000" /> -->
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量
        <property name="numTestsPerEvictionRun" value="5" /> -->
    </bean>

    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:com/wind/ssm/manage/*/dao/mapper/*Mapper.xml" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.wind.ssm.manage.*.dao" />
    </bean>
    
    <!-- 声明式事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
</beans>